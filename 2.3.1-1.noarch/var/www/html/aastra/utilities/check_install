#!/usr/bin/php -q
<?php 
#############################################################################
# Installation checkup for aastra-xml-scripts
#
# This script checks if everything is configured properly for the XML scripts.
#
# Copyright 2011 Aastra Telecom Ltd
#
# Usage
# 	check_install
#
#############################################################################

#############################################################################
# PHP customization for includes and warnings
#############################################################################
chdir(dirname(__FILE__));
$os = strtolower(PHP_OS);
if(strpos($os, "win") === false) ini_set('include_path',ini_get('include_path').':include:../include');
else ini_set('include_path',ini_get('include_path').';include;..\include');
error_reporting(E_ERROR | E_PARSE);

#############################################################################
# Includes
#############################################################################
require_once('AastraCommon.php');
require_once('AastraAsterisk.php');

#############################################################################
# Private functions
#############################################################################
function display($title,$result,$comment)
{
echo str_pad($title.'  ',60,'.');
echo '  ';
switch($result)
	{
	case '0':
		echo 'FAILED';
		break;
	case '1':
		echo 'Passed';
		break;
	case '2':
		echo 'WARNING';
		break;
	}
echo "\n";
if($comment) echo '-> '.$comment."\n";
}

function meetme()
{
$array=Aastra_get_meetme_rooms_Asterisk();
$count=count($array);
if($count==0) 
	{
	$title='No meet-me room configured';
	$result='2';
	$comment='Please configure meet-me rooms using freePBX';
	}
else
	{
	$title=$count.' meet-me room(s) configured';
	$result='1';
	$comment='';
	}
display($title,$result,$comment);
return($result);
}

function parking()
{
$array=Aastra_get_park_config_Asterisk();
$parking=$array['parkext'];
if($parking=='') 
	{
	$title='No parking extension configured';
	$result='2';
	$comment='Please configure parking lot using freePBX ';
	}
else
	{
	$title='Parking extension configured ('.$parking.')';
	$result='1';
	$comment='';
	}
display($title,$result,$comment);
return($result);
}

function intercom()
{
$intercom=Aastra_get_intercom_config_Asterisk();
if($intercom=='') 
	{
	$title='No Intercom prefix configured';
	$result='2';
	$comment='Please configure Intercom prefix using freePBX';
	}
else
	{
	$title='Intercom prefix configured ('.$intercom.')';
	$result='1';
	$comment='';
	}
display($title,$result,$comment);
return($result);
}

function php_agi()
{
$title='php-agi connection';
$comment='';
$asm=new AGI_AsteriskManager();
$res=$asm->connect(NULL,NULL,NULL,False);
if(!$res) 
	{
	$result='0';
	$comment='Please check config/asterisk.conf and etc/asterisk/manager_custom.conf';
	}
else
	{
	$result='1';
	$asm->disconnect();
	}
display($title,$result,$comment);
return($result);
}

function test_nopackage($package)
{
$return='2';
exec('rpm -q '.$package.' | grep -c '."\"not installed\"",$output,$ret);
if($output[0]=='1') $return='1';
else $comment='Please uninstall package '.$package;
display('No Package '.$package,$return,$comment);
return($return);
}

function test_firmware($version='')
{
$return='0';
$package='aastra-ipphone';
$title='Phone firmware package';

# Check if package is installed
exec('rpm -q '.$package.' | grep -c '."\"not installed\"",$output,$ret);
if($output[0]!='0') $comment='Please install package '.$package.'-'.$version.' or better';
else
	{
	unset($output);
	exec('rpm -q '.$package,$output,$ret);
	$array_temp=explode('-',$output[0]);
	$installed=$array_temp[2];
	$installed2=preg_replace("/\./",'',$installed);
	$version2=preg_replace("/\./",'',$version);
	if($installed2<$version2) $comment='Please install package '.$package.'-'.$version.' or better';
	else 
		{
		$title.=' ('.$installed.')';
		$return='1';
		}
	}
display($title,$return,$comment);
return($return);
}

function test_package($package,$version='')
{
$return='0';
if($version!='')
	{
	exec('rpm -q '.$package.' | grep -c '.$version,$output,$ret);
	if($output[0]=='1') $return='1';
	else $comment='Please install package '.$package.'-'.$version;
	}
else
	{
	exec('rpm -q '.$package.' | grep -c '."\"not installed\"",$output,$ret);
	if($output[0]=='0') $return='1';
	else $comment='Please install package '.$package;
	}
display('Package '.$package,$return,$comment);
return($return);
}

function cache_directory()
{
$return='1';
$title='Cache Directory ('.AASTRA_PATH_CACHE.')';
if(!is_dir(AASTRA_PATH_CACHE))
	{
	if(!mkdir(AASTRA_PATH_CACHE,0755))
		{
		$return='0';
		$comment='Please create '.AASTRA_PATH_CACHE.' directory with r/w for user asterisk';
		}
	else
		{
		if(!chown(AASTRA_PATH_CACHE,'asterisk'))
			{
			$return='0';
			$comment='Please set '.AASTRA_PATH_CACHE.' directory with r/w for user asterisk';
			}
		}
	}
if($return=='1')
	{
	$user=posix_getpwuid(fileowner(AASTRA_PATH_CACHE));
	if($user['name']!='asterisk')
		{
		if(!chown(AASTRA_PATH_CACHE,'asterisk'))
			{
			$return='0';
			$comment='Please set '.AASTRA_PATH_CACHE.' directory with r/w for user asterisk';
			}
		}
	}
if($return=='1')
	{
	$perms=fileperms(AASTRA_PATH_CACHE);
	if(($perms & 0x0100) and ($perms & 0x0080)) $return=True;
	else
		{
		if(!chmod(AASTRA_PATH_CACHE,0755))
			{
			$return='0';
			$comment='Please set '.AASTRA_PATH_CACHE.' directory with r/w for user asterisk';
			}
		}
	}
display($title,$return,$comment);
return($return);
}

function tftp_directory()
{
$return='1';
$title='TFTP Directory ('.AASTRA_TFTP_DIRECTORY.')';
if(!is_dir(AASTRA_TFTP_DIRECTORY))
	{
	$return='0';
	$comment='Please create '.AASTRA_TFTP_DIRECTORY.' directory with r/w for user asterisk';
	}
if($return=='1')
	{
	$user=posix_getpwuid(fileowner(AASTRA_TFTP_DIRECTORY));
	clearstatcache() ;
	$perms=fileperms(AASTRA_TFTP_DIRECTORY);
	if(($perms & 0x0100) and ($perms & 0x0080)) $user_perms=True;
	if(($perms & 0x0004) and ($perms & 0x0002)) $world_perms=True;
	if(($user['name']!='asterisk') and !$world_perms)
		{
		if(!chmod(AASTRA_TFTP_DIRECTORY,0777))
			{
			$return='1';
			$comment='Please set '.AASTRA_TFTP_DIRECTORY.' directory with r/w for user asterisk';
			}
		}
	if(($user['name']=='asterisk') and !$user_perms)
		{
		if(!chmod(AASTRA_TFTP_DIRECTORY,0777))
			{
			$return='0';
			$comment='Please set '.AASTRA_TFTP_DIRECTORY.' directory with r/w for user asterisk';
			}
		}
	}
display($title,$return,$comment);
return($return);
}

function aastra_cfg()
{
$return='1';
if(!file_exists(AASTRA_TFTP_DIRECTORY.'/aastra.cfg'))
	{
	$return='0';
	$comment='Please generate aastra.cfg using setup-aastra-xml command';
	}
$title=AASTRA_TFTP_DIRECTORY.'/aastra.cfg';
display($title,$return,$comment);
return($return);
}

function version()
{
Global $AA_ASTERISK_VERSION;

$title='Asterisk version ('.$AA_ASTERISK_VERSION.')';
display($title,'1','');
return('1');
}

function dev_state()
{
Global $AA_ASTERISK_VERSION;
Global $AA_FREEPBX_USEDEVSTATE;

$return='1';
$installed=False;
if($AA_FREEPBX_USEDEVSTATE) $title='USEDEVSTATE set to True';
else $title='USEDEVSTATE set to False';
$comment='';

if($AA_ASTERISK_VERSION=='1.6')
	{
	if(!$AA_FREEPBX_USEDEVSTATE) 
		{
		$return='2';
		$comment='Please configure USEDEVSTATE to True on /etc/amportal.conf';
		}
	}
else
	{
	$asm=new AGI_AsteriskManager();
	$res=$asm->connect(NULL,NULL,NULL,False);
	$res=$asm->Command('module show like devstate');
	$line=split("\n", $res['data']);
	foreach($line as $myline)
		{
		if(stristr($myline,'modules loaded'))
			{
 			$linevalue= preg_split('/ /', $myline,-1,PREG_SPLIT_NO_EMPTY);
			if($linevalue[0]!='0') $installed=True;
			}
		}
	$asm->disconnect();
	if($installed and !$AA_FREEPBX_USEDEVSTATE)
		{
		$return='2';
		$comment='Please configure USEDEVSTATE to True on /etc/amportal.conf';
		}
	}
display($title,$return,$comment);
return(True);
}

function freepbx_mode()
{
Global $AA_FREEPBX_MODE;

if($AA_FREEPBX_MODE=='1') $title='freePBX mode set to extensions';
else $title='freePBX mode set to deviceanduser';
display($title,'1','');
return('1');
}

function daynight()
{
$return='1';
$daynight=count(Aastra_manage_daynight_Asterisk('get_all',''));
if($daynight==0)
	{
	$title='No day/night index configured';
	$comment='Please configure day/night index using freePBX if you plan to use this function';
	$return='2';
	}
else $title=$daynight.' Day/Night indexe(s) configured';
display($title,$return,$comment);
return($return);
}

function freepbx_db()
{
$title='freePBX database connection';
$comment='';
$db=Aastra_connect_freePBX_db_Asterisk();
if($db==NULL)
	{
	$result='0';
	$comment='Please check freePBX configuration';
	}
else $result='1';
display($title,$result,$comment);
return($result);
}

function queues()
{
global $queue_details;

# Connect to AGI
$asm=new AGI_AsteriskManager();
$asm->connect();

# Add event handler to retrieve results of the query
$asm->add_event_handler('queueparams','asm_event_queues');
$asm->add_event_handler('queuestatuscomplete','asm_event_queues');

# Get all the queues
while(!$queue_details) $asm->QueueStatus();

# Process the list of queues
$index=0;
for($i=0; ($i<sizeof($queue_details)) and ($index<AASTRA_MAXLINES);$i++)  
	{
	# Valid queue
      	if($queue_details[$i]['Queue'] && $queue_details[$i]['Queue']!='default')  
		{
		# Next valid queue
		$index++;
      		}
	}

# Disconnect properly
$asm->disconnect();

if($index==0) 
	{
	$result='2';
	$title='No ACD queue configured';
	$comment='Configure queues using freePBX interface';
	}
else
	{
	$result='1';
	$title=$index.' ACD queue(s) configured';
	}
display($title,$result,$comment);
return('1');
}

function asm_event_queues($e, $parameters, $server, $port)  
{
global $queue_details;

if(sizeof($parameters))  
	{
      	if($parameters[Event]='QueueParams') $queue_details[]=$parameters;
    	}
}

function extensions()
{
$extensions=count(Aastra_get_user_directory_Asterisk('admin'));
if($extensions==0) 
	{
	$result='2';
	$title='No extension configured';
	$comment='Configure extensions using freePBX interface';
	}
else
	{
	$result='1';
	$title=$extensions.' extension(s) configured';
	}
display($title,$result,$comment);
return($result);
}

function directory()
{
$array_config_asterisk=Aastra_readINIfile(AASTRA_CONFIG_DIRECTORY.'asterisk.conf','#','=');
if($array_config_asterisk['Directory']['hidden']!='') 
	{
	display('Hidden direction extension(s)','1','');
	$array_hidden=explode(',',$array_config_asterisk['Directory']['hidden']);
	foreach($array_hidden as $key=>$value)
		{
		echo '     ';
		if(strstr($value,'-')) 
			{
			$array_tmp=explode('-',$value);
			if($array_tmp['0']!='') $min=$array_tmp[0];
			else $min='0';
			if($array_tmp['1']!='') $max=$array_tmp[1];
			else $max='9999999999';
			if($min=='0') echo 'All extensions below '.$max."\n";
			else
				{
				if($max=='9999999999') echo 'All extensions over '.$min."\n";
				else echo 'Extensions between '.$min.' and '.$max."\n";
				}
			}
		else echo 'Extension '.$value."\n";
		}
	}
else display('No hidden directory extension','1','');
return('1');
}

function dialplan()
{
$result='1';
$array_conf=Aastra_readINIfile(AASTRA_CONFIG_DIRECTORY.'directory.conf','#','=');
$display='     ';
if($array_conf['Dialplan']['country']=='') 
	{
	$result='2';
	$display.='->No country code';
	}
else $display.='Country code: '.$array_conf['Dialplan']['country'];
$display.="\n";
$display.='     ';
if($array_conf['Dialplan']['long distance']=='') $display.='No long distance prefix';
else $display.='Long distance prefix: '.$array_conf['Dialplan']['long distance'];
$display.="\n";
$display.='     ';
if($array_conf['Dialplan']['international']=='') 
	{
	$result='2';
	$display.='->No international prefix';
	}
else $display.='International prefix: '.$array_conf['Dialplan']['international'];
$display.="\n";
$display.='     ';
if($array_conf['Dialplan']['outgoing']=='') $display.='No outbound prefix';
else $display.='Outbound prefix: '.$array_conf['Dialplan']['outgoing'];
$display.="\n";
$display.='     ';
if($array_conf['Dialplan']['local']=='') $display.='No local prefix';
else $display.='Local prefix(es): '.$array_conf['Dialplan']['local'];
$display.="\n";
$display.='     ';
if($array_conf['Dialplan']['localextlen']=='') $display.='Local extension length not set';
else $display.='Local extension length: '.$array_conf['Dialplan']['localextlen'];
$display.="\n";

display('Local dial plan',$result,'');
echo $display;
}

function voicemail_conf()
{
Global $ASTERISK_LOCATION;
$result='0';

$array=Aastra_readINIfile($ASTERISK_LOCATION.'voicemail.conf',';','=');
if(substr($array['general']['pollmailboxes'],0,3)=='yes') $result='1';
if($result=='0')
	{
	$array=Aastra_readINIfile($ASTERISK_LOCATION.'vm_general.inc',';','=');
	if(substr($array['']['pollmailboxes'],0,3)=='yes') $result='1';
	}
if($result=='0') $comment='Please enable pollmailboxes in '.$ASTERISK_LOCATION.'voicemail.conf';
display('Voicemail configuration',$result,$comment);
return($result);
}

function wideband()
{
Global $ASTERISK_LOCATION;
$result='2';

exec('grep -c g722 '.$ASTERISK_LOCATION.'sip_general_additional.conf',$output1,$ret);
if($output1[0]=='1') $result='1';
else 
	{
	exec('grep -c g722 '.$ASTERISK_LOCATION.'sip_general_custom.conf',$output2,$ret);
	if($output2[0]=='1') $result='1';
	else $comment='You may want to activate g722 in '.$ASTERISK_LOCATION.'sip_general_custom.conf or via the freePBX module';
	}
display('Wideband Codec (g722) configuration',$result,$comment);
return($result);
}

#############################################################################
# Main code
#############################################################################
$version='2.3.1';
$firmware='2.6.0';

#############################################################################
# Titre principal
#############################################################################
passthru('clear');
$title='Aastra XML scripts '.$version.' Installation Check';
echo $title."\n";
echo str_repeat('=',strlen($title))."\n";
echo "\n";

# Check if user is root
exec ('echo $EUID',$output,$ret);
if($output[0]!='0') 
	{
	echo "This script must be executed as root.\n";
	exit;
	}

#############################################################################
# Package installation
#############################################################################
$title="Package installation";
$return=True;
echo str_pad(' '.$title.' ',68,'-',STR_PAD_BOTH)."\n";
test_package('php-gd');
test_package('php-ldap');
test_package('avahi');
test_nopackage('mDNSResponder');
test_nopackage('mDNSResponder-util');
test_firmware($firmware);
test_package('aastra-xml-scripts',$version);
cache_directory();
tftp_directory();
aastra_cfg();
if(php_agi()!='1') exit;
if(freepbx_db()!='1') exit;

#############################################################################
# Asterisk Configuration
#############################################################################
$title="Asterisk/freePBX Configuration";
$return=True;
echo str_pad(' '.$title.' ',68,'-',STR_PAD_BOTH)."\n";
version();
display('Asterisk location set to '.$ASTERISK_LOCATION,'1','');
display('Asterisk spooler set to '.$ASTERISK_SPOOLDIR,'1','');
voicemail_conf();
dev_state();
wideband();
freepbx_mode();
extensions();
meetme();
parking();
intercom();
daynight();
queues();

#############################################################################
# Script Configuration
#############################################################################
$title="Aastra XML scripts Configuration";
$return=True;
echo str_pad(' '.$title.' ',68,'-',STR_PAD_BOTH)."\n";
if($DEBUG) display('Debug mode activated','1','');
else display('Debug mode not activated','1','');
if($TRACE) display('Trace mode activated','1','');
else display('Trace mode not activated','1','');
if($LANGUAGE=='') display('Language not forced','1','');
else display('Language forced to '.$LANGUAGE,'1','');
if($AA_PROXY_SERVER!='') display('Asterisk SIP proxy forced to '.$AA_PROXY_SERVER,'1','');
if($AA_REGISTRAR_SERVER!='') display('Asterisk SIP registrar forced to '.$AA_REGISTRAR_SERVER,'1','');
if($AA_FREEPBX_MODE=='1')
	{
	if($AA_PHONE_SIGNATURE) display('Phone Signature check is enabled','1','');
	else display('Phone Signature check is disabled','1','');
	}
if($AA_PW_ADMIN!='') display('Self-configuration admin password set to '.$AA_PW_ADMIN,'1','');
else display('Self-configuration admin password not configured','2','You may want to configure it in config/asterisk.conf');
if($AA_PW_USER!='') display('Self-configuration user password forced to '.$AA_PW_USER,'1','');
else display('Self-configuration user password not configured','2','You may want to configure it in config/asterisk.conf for users without VM');
if($AA_FREEPBX_MODE=='1')
	{
	if($AA_LOGOUT_PW) display('Logout password check is enabled','1','');
	else display('Logout password check is disabled','1','');
	if($AA_AUTOLOGOUT) 
		{
		display('Auto-Logout feature is enabled','1','');
		if($AA_AUTOLOGOUT_MSG) display('Auto-Logout idle screen message is enabled','1','');
		else display('Auto-Logout idle screen message is disabled','1','');
		}
	else display('Auto-Logout feature is disabled','1','');
	}
if($AA_DND_PAUSE) display('DND pauses all ACD queues enabled','1','');
else display('DND pauses all ACD queues disabled','1','');
if($AA_SPEEDDIAL_STATE) display('Speed dial application enabled','1','');
else display('Speed dial application disabled','1','');
if($AA_PRESENCE_STATE) display('Presence application enabled','1','');
else display('Presence application disabled','1','');
if($AA_MEETME_STATE) display('Meet-me automatic launch enabled','1','');
else display('Meet-me automatic launch disabled','1','');
if($AA_OUTGOING_STATE) 
	{
	display('Outgoing state display application enabled','1','');
	if($AA_OUTGOING_LOOKUP!='') display('Outgoing external lookup application enabled','1',$AA_OUTGOING_LOOKUP);
	else display('Outgoing external lookup application disabled','1');
	}
else display('Outgoing state display application disabled','1','');
if($AA_FORMAT_DT!='') display('Date/Time format (US)','1','');
else display('Date/Time format (International)','1','');
if($AA_ASK_TZ) display('User asked for Timezone (Yes)','1','');
else display('User asked for timezone (no)','1','');
directory();
dialplan();

?>